# Copyright (C) 2015 Forecast Foundation OU, full GPL notice in LICENSE

extern controller: [lookup:[int256]:int256, assertIsWhitelisted:[int256]:int256]

extern subcurrency: [allowance:[address,address]:uint256, approve:[address,uint256]:uint256, balanceOf:[address]:uint256, decimals:[]:uint256, name:[]:uint256, symbol:[]:uint256, totalSupply:[]:uint256, transfer:[address,uint256]:uint256, transferFrom:[address,address,uint256]:uint256]

extern shareTokens: [allowance:[address,address]:int256, approve:[address,uint256]:int256, balanceOf:[address]:int256, createShares:[address,uint256]:int256, destroyShares:[address,uint256]:int256, getDecimals:[]:int256, getName:[]:int256, getSymbol:[]:int256, setController:[address]:int256, suicideFunds:[address]:_, totalSupply:[]:int256, transfer:[address,uint256]:int256, transferFrom:[address,address,uint256]:int256]

inset('../macros/refund.sem')

# Markets' index is the market, markets stores data about markets [which are able to be traded on] in augur
    # Event is the event in the market
    # currentParticipant is the number of participants [traders] in the market
    # cumulativeScale == range of the market for scalars
    # numOutcomes is the number of outcomes in a market [up to 8 for now]
    # a binary outcome state 1 is no, 2 is true, 0 if not done, 1.5 if indeterminate
    # fxpTradingFee is a percent in fixedPoint and the base trading fee for a market
    # tradingPeriod is which eventExpPeriod market expires in
    # pushing forward is whether a market has been pushed forward to attempt early resolution
    # bondsman is the person/address who/that posted the early resolution bond
    # originalPeriod is the original period the market's event would resolve in
    # orderIDs stores orders for a given market
    # tags are the subject tags / categories / keywords for a given market
    # resolved states that a market is resolved
    # extraInfo is any extra info that didn't fit well in the regular description
    # sharesValue is the value of the shares traded in a given market
    # gasSubsidy is paid by the creator to pay for closing the market [closing is just setting the winning outcomes and allowing people to withdraw funds if they own winning shares]
    # fees is total amount of fees a market has paid to a branch [the reporters] denominated in wei
    # lastExpDate is when the market's last event expires
    # shareContracts stores the erc-20 token contract address for each outcome in the market
data Markets[](event, resolved, cumulativeScale, numOutcomes, tradingPeriod, fxpTradingFee, branch, pushingForward, bondsMan, originalPeriod, tag1, tag2, tag3, extraInfo[], extraInfoLen, sharesValue, gasSubsidy, fees, lastExpDate, shareContracts[], shareWallets[])

# takes branch as param, composite hash of all markets in the system
data marketsHash[]

data controller

def init():
    self.controller = 0x0

def initializeMarket(market, event, tradingPeriod, fxpTradingFee, branch, tag1, tag2, tag3, fxpCumulativeScale, numOutcomes, extraInfo: str, gasSubsidy, fxpCreationFee, lastExpDate, shareContracts: arr, shareWallets: arr):
    self.controller.assertIsWhitelisted(msg.sender)
    self.Markets[market].event = event
    if(numOutcomes > 8):
        ~invalid()
    i = 0
    while i < numOutcomes:
        self.Markets[market].shareContracts[i + 1] = shareContracts[i]
        self.Markets[market].shareWallets[i + 1] = shareWallets[i]
        i += 1
    save(self.Markets[market].extraInfo[0], extraInfo, chars = len(extraInfo))
    self.Markets[market].extraInfoLen = len(extraInfo)
    self.Markets[market].tradingPeriod = tradingPeriod
    self.Markets[market].originalPeriod = tradingPeriod
    self.Markets[market].fxpTradingFee = fxpTradingFee
    self.Markets[market].branch = branch
    self.Markets[market].cumulativeScale = fxpCumulativeScale
    self.Markets[market].numOutcomes = numOutcomes
    self.Markets[market].tag1 = tag1
    self.Markets[market].tag2 = tag2
    self.Markets[market].tag3 = tag3
    self.Markets[market].gasSubsidy = gasSubsidy
    self.Markets[market].fees = fxpCreationFee
    self.Markets[market].lastExpDate = lastExpDate
    self.addToMarketsHash(branch, market)
    return(1)

def modifySharesValue(market, fxpAmount):
    self.controller.assertIsWhitelisted(msg.sender)
    self.Markets[market].sharesValue += fxpAmount
    return(1)

def getMarketResolved(market):
    return(self.Markets[market].resolved)

def setMarketResolved(market):
    self.Markets[market].resolved = 1
    return(1)

def setTradingFee(market, fee):
    self.controller.assertIsWhitelisted(msg.sender)
    self.Markets[market].fxpTradingFee = fee
    return(fee)

def setPushedForward(market, bool, sender):
    self.controller.assertIsWhitelisted(msg.sender)
    self.Markets[market].pushingForward = bool
    self.Markets[market].bondsMan = sender
    return(1)

def addToMarketsHash(branch, newHash):
    self.controller.assertIsWhitelisted(msg.sender)
    x = array(2)
    x[0] = self.marketsHash[branch]
    x[1] = newHash
    self.marketsHash[branch] = sha3(x, items = 2)
    return(1)

def addFees(market, fxpAmount):
    self.controller.assertIsWhitelisted(msg.sender)
    if(self.Markets[market].fees + fxpAmount > self.Markets[market].fees):
        self.Markets[market].fees += fxpAmount
    return(1)

# refund closing cost for a market
def refundClosing(market, to):
    self.controller.assertIsWhitelisted(msg.sender)
    subsidy = self.Markets[market].gasSubsidy
    self.Markets[market].gasSubsidy -= subsidy
    if(!send(to, subsidy)):
        ~invalid()
    return(1)

def setTradingPeriod(market, period):
    self.Markets[market].tradingPeriod = period
    return(1)

def getMarketsHash(branch):
    return(self.marketsHash[branch])

def getLastExpDate(market):
    return(self.Markets[market].lastExpDate)

def getFees(market):
    return(self.Markets[market].fees)

def getGasSubsidy(market):
    return(self.Markets[market].gasSubsidy)

# @return fxp
def getSharesValue(market):
    return(self.Markets[market].sharesValue)

def getTags(market):
    tags = array(3)
    tags[0] = self.Markets[market].tag1
    tags[1] = self.Markets[market].tag2
    tags[2] = self.Markets[market].tag3
    return(tags: arr)

def getTopic(market):
    return(self.Markets[market].tag1)

def getMarketEvent(market):
    return(self.Markets[market].event)

def getMarketShareContracts(market):
    numOutcomes = self.Markets[market].numOutcomes
    shareContracts = array(numOutcomes)
    i = 0
    while i < numOutcomes:
        shareContracts[i] = self.Markets[market].shareContracts[i + 1]
        i += 1
    return(shareContracts: arr)

def getOutcomeShareWallet(market, outcome):
    return(self.Markets[market].shareWallets[outcome])

def getOutcomeShareContract(market, outcome):
    return(self.Markets[market].shareContracts[outcome])

def getExtraInfoLength(market):
    return(self.Markets[market].extraInfoLen)

def getExtraInfo(market):
    length = self.Markets[market].extraInfoLen
    return(load(self.Markets[market].extraInfo[0], chars = length): str)

# @return fxp
def getCumulativeScale(market):
    return(self.Markets[market].cumulativeScale)

def getMarketNumOutcomes(market):
    return(self.Markets[market].numOutcomes)

def getTradingPeriod(market):
    return(self.Markets[market].tradingPeriod)

def getOriginalTradingPeriod(market):
    return(self.Markets[market].originalPeriod)

def getTradingFee(market):
    return(self.Markets[market].fxpTradingFee)

def getBranch(market):
    return(self.Markets[market].branch)

def getPushedForward(market):
    return(self.Markets[market].pushingForward)

def getBondsMan(market):
    return(self.Markets[market].bondsMan)

# @return fxp
def getTotalSharesPurchased(market):
    total = 0
    n = self.Markets[market].numOutcomes
    i = 1
    while(i <= n):
        total += self.Markets[market].shareContracts[i].totalSupply()
        i += 1
    return(total)

# @return fxp
def getSharesPurchased(market, outcome):
    return(self.Markets[market].shareContracts[outcome].totalSupply(): uint256)

# @return fxp
def getParticipantSharesPurchased(market, trader, outcome):
    return(self.Markets[market].shareContracts[outcome].balanceOf(trader))

def setController(newController: address):
    if(msg.sender != self.controller):
        ~invalid()
    self.controller = newController
    return(1)

def suicideFunds(to: address):
    if(msg.sender != self.controller):
        ~invalid()
    suicide(to)