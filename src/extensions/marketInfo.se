#Copyright (C) 2015 Forecast Foundation OU, full GPL notice in LICENSE

extern controller: [lookup:[int256]:int256, assertIsWhitelisted:[int256]:int256]

BRANCHES = self.controller.lookup('branches')
extern branches: [getForkingEvent:[int256]:int256, setForkingEvent:[int256,int256]:int256]

EVENTS = self.controller.lookup('events')
extern events: [allowance:[int256,int256]:uint256, approve:[int256,int256]:int256, assertEventIsInAutomatedReportDisputePhase:[int256]:int256, assertEventIsInAutomatedReportPhase:[int256]:int256, assertEventIsInCurrentReportingWindow:[int256]:int256, assertEventIsInDisputePhase:[int256]:int256, assertEventIsInReportingPhase:[int256]:int256, assertEventIsNotDoneWithReporters:[int256]:int256, assertEventIsNotFinalized:[int256]:int256, assertReporterHasRegistrationToken:[int256]:int256, automatedReport:[int256,int256]:_, balanceOf:[int256,int256,int256,int256]:uint256, createEvent:[int256,int256,int256,int256]:int256, disputeAllReporters:[int256]:_, disputeAutomatedReport:[int256]:_, disputeLimitedReporters:[int256]:_, finalizeEvent:[int256]:_, getAutomatedReportDisputeDueTimestamp:[int256]:int256, getAutomatedReportDueTimestamp:[int256]:int256, getEventBranch:[int256]:int256, getNumberOfAllReporterEvents:[int256,int256]:int256, getNumberOfLimitedReporterEvents:[int256,int256]:int256, isEventFinalized:[int256]:int256, migrateEventThroughAllForks:[int256]:int256, migrateEventThroughOneFork:[int256]:int256, privateAdjustTentativeOutcome:[int256,int256]:_, privateBuyToken:[int256,int256,int256,int256]:_, privateRedeemCorrectOutcomeTokens:[int256,int256,int256,int256]:int256, privateTransfer:[int256,int256,int256,int256,int256,int256]:int256, privateTryRedeemTokensForNonForkingEventOnForkedBranch:[int256,int256,int256,int256]:int256, privateTryRedeemTokensOnForkingEvent:[int256,int256,int256,int256]:int256, redeemTokens:[int256,int256,int256]:int256, report:[int256,int256,int256]:int256, totalSupply:[int256,int256,int256]:uint256, transfer:[int256,int256,int256,int256,int256]:int256, transferFrom:[int256,int256,int256,int256,int256,int256]:int256, tryFinalizeEvent:[int256]:int256]

REPORTING = self.controller.lookup('reporting')
extern reporting: [assertCanReportOnEvent:[int256,int256]:int256, assertDoneReporting:[int256,int256,int256]:int256, clearUserReports:[int256,int256,int256]:int256, getCurrentReportingWindow:[]:int256, getCurrentReportingWindowEndTimestamp:[]:int256, getCurrentReportingWindowStartTimestamp:[]:int256, getReportingPeriodDurationInSeconds:[]:int256, getReportingWindowForTimestamp:[int256]:int256, getTargetReportsPerReporter:[int256,int256]:int256, getUserSeed:[int256,int256,int256]:int256, isInReportingDisputePhase:[]:int256, isInReportingPhase:[]:int256, noteUserReport:[int256,int256]:int256]

ORDERS = self.controller.lookup('orders')
extern orders: [addOrder:[int256,int256]:int256, cancelOrderLog:[int256,int256,int256,int256,int256,int256,int256,int256,int256]:int256, checkHash:[int256,int256]:int256, commitOrder:[int256]:int256, completeSetsLog:[int256,int256,int256,int256,int256,int256]:int256, fillOrder:[int256,int256,int256,int256]:int256, getAmount:[int256]:int256, getID:[int256]:int256, getLastOrder:[int256]:int256, getLastOutcomePrice:[int256,int256]:int256, getOrder:[int256]:int256[], getOrderIDs:[int256]:int256[], getOrderOwner:[int256]:int256, getPrevID:[int256,int256]:int256, getPrice:[int256]:int256, getTotalOrders:[int256]:int256, getType:[int256]:int256, getVolume:[int256]:int256, makeOrderHash:[int256,int256,int256]:int256, modifyMarketVolume:[int256,int256]:int256, removeOrder:[int256]:int256, removeOrderFromMarket:[int256,int256]:int256, saveOrder:[int256,int256,int256,int256,int256,int256,int256,int256,int256,int256]:int256, setController:[address]:int256, setPrice:[int256,int256,int256]:int256, suicideFunds:[address]:_, takeAskOrderLog:[address,address,address,int256,uint256,address,uint256,uint256,uint256,uint256,uint256]:int256, takeBidOrderLog:[address,address,address,int256,uint256,address,uint256,uint256,uint256,uint256,uint256,uint256]:int256]

MARKETS = self.controller.lookup('markets')
extern markets: [addFees:[int256,int256]:int256, addToMarketsHash:[int256,int256]:int256, getBondsMan:[int256]:int256, getBranch:[int256]:int256, getCumulativeScale:[int256]:int256, getExtraInfo:[int256]:bytes, getExtraInfoLength:[int256]:int256, getFees:[int256]:int256, getGasSubsidy:[int256]:int256, getLastExpDate:[int256]:int256, getMarketEvent:[int256]:int256, getMarketNumOutcomes:[int256]:int256, getMarketResolved:[int256]:int256, getMarketShareContracts:[int256]:int256[], getMarketsHash:[int256]:int256, getOriginalTradingPeriod:[int256]:int256, getOutcomeShareContract:[int256,int256]:int256, getOutcomeShareWallet:[int256,int256]:int256, getParticipantSharesPurchased:[int256,int256,int256]:int256, getPushedForward:[int256]:int256, getSharesPurchased:[int256,int256]:uint256, getSharesValue:[int256]:int256, getTags:[int256]:int256[], getTopic:[int256]:int256, getTotalSharesPurchased:[int256]:int256, getTradingFee:[int256]:int256, getTradingPeriod:[int256]:int256, initializeMarket:[int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,bytes,int256,int256,int256,int256[],int256[]]:int256, modifySharesValue:[int256,int256]:int256, refundClosing:[int256,int256]:int256, setController:[address]:int256, setMarketResolved:[int256]:int256, setPushedForward:[int256,int256,int256]:int256, setTradingFee:[int256,int256]:int256, setTradingPeriod:[int256,int256]:int256, suicideFunds:[address]:_]

inset('../macros/refund.sem')
inset('../macros/unitConversions.sem')

macro EVENTS_FIELDS: 7
macro OUTCOMES_FIELDS: 3
macro BASE_FIELDS: 15
macro BASE_CACHE_FIELDS: 10

data controller

def init():
    self.controller = 0x0

def getMarketInfo(marketID, account):
    refund()
    index = BASE_FIELDS
    eventID = MARKETS.getMarketEvent(marketID)
    descriptionLength = INFO.getDescriptionLength(eventID)
    resolutionLength = EVENTS.getResolutionLength(eventID)
    extraInfoLength = MARKETS.getExtraInfoLength(marketID)
    numOutcomes = MARKETS.getMarketNumOutcomes(marketID)
    marketInfo = array(BASE_FIELDS + EVENTS_FIELDS + numOutcomes*OUTCOMES_FIELDS + descriptionLength + resolutionLength + extraInfoLength + 3)
    marketInfo[0] = marketID
    marketInfo[1] = MARKETS.getFees(marketID)
    marketInfo[2] = numOutcomes
    marketInfo[3] = MARKETS.getTradingPeriod(marketID)
    marketInfo[4] = MARKETS.getTradingFee(marketID)
    marketInfo[5] = 0
    marketInfo[6] = MARKETS.getCumulativeScale(marketID)
    marketInfo[7] = MARKETS.getSharesValue(marketID)
    marketInfo[8] = ORDERS.getTotalOrders(marketID)
    marketInfo[9] = ORDERS.getVolume(marketID)
    marketInfo[10] = INFO.getCreationFee(marketID)
    marketInfo[11] = INFO.getCreator(marketID)
    tags = MARKETS.getTags(marketID, outitems=3)
    marketInfo[12] = tags[0]
    marketInfo[13] = tags[1]
    marketInfo[14] = tags[2]

    # gather event(s) info:
    # [eventID, expirationDate, outcome, minValue, maxValue, numOutcomes]
    eventInfo = EVENTS.getEventInfo(eventID, outitems=EVENTS_FIELDS - 2)
    marketInfo[index] = eventID
    j = 1
    while j < EVENTS_FIELDS - 2:
        marketInfo[index + j] = eventInfo[j]
        j += 1
    marketInfo[index + EVENTS_FIELDS - 2] = EVENTS.getEthics(eventID)
    # marketInfo[index + EVENTS_FIELDS - 1] = proportionCorrect(eventID, EVENTS.getForked(eventID))
    index += EVENTS_FIELDS

    # gather outcomes info: [sharesPurchased, price]
    # (price of outcome = last trade)
    k = 0
    while k < numOutcomes:
        marketInfo[index + k*OUTCOMES_FIELDS] = MARKETS.getSharesPurchased(marketID, k + 1)
        marketInfo[index + k*OUTCOMES_FIELDS + 1] = ORDERS.getLastOutcomePrice(marketID, k + 1)
        if account != 0:
            marketInfo[index + k*OUTCOMES_FIELDS + 2] = MARKETS.getParticipantSharesPurchased(marketID, account, k + 1)
        k += 1
    index += numOutcomes*OUTCOMES_FIELDS

    # append description character codes
    marketInfo[index] = descriptionLength
    index += 1
    description = INFO.getDescription(eventID, outchars=descriptionLength)
    c = 0
    while c < descriptionLength:
        marketInfo[index + c] = getch(description, c)
        c += 1
    index += descriptionLength

    # append resolution character codes
    marketInfo[index] = resolutionLength
    index += 1
    resolution = EVENTS.getEventResolution(eventID, outchars=resolutionLength)
    c = 0
    while c < resolutionLength:
        marketInfo[index + c] = getch(resolution, c)
        c += 1
    index += resolutionLength

    # append extraInfo character codes
    marketInfo[index] = extraInfoLength
    index += 1
    extraInfo = MARKETS.getExtraInfo(marketID, outchars=extraInfoLength)
    c = 0
    while c < extraInfoLength:
        marketInfo[index + c] = getch(extraInfo, c)
        c += 1

    return(marketInfo: arr)

def batchGetMarketInfo(marketIDs: arr, account):
    refund()
    numMarkets = len(marketIDs)
    totalLength = 0
    marketInfoLength = array(numMarkets)
    i = 0
    while i < numMarkets:
        marketID = marketIDs[i]
        eventID = MARKETS.getMarketEvent(marketID)
        descriptionLength = INFO.getDescriptionLength(eventID)
        resolutionLength = EVENTS.getResolutionLength(eventID)
        extraInfoLength = MARKETS.getExtraInfoLength(marketID)
        numOutcomes = MARKETS.getMarketNumOutcomes(marketID)
        marketInfoLength[i] = BASE_FIELDS + EVENTS_FIELDS + numOutcomes*OUTCOMES_FIELDS + descriptionLength + resolutionLength + extraInfoLength + 4
        totalLength += marketInfoLength[i]
        i += 1
    marketsInfo = array(totalLength)
    index = 0
    i = 0
    while i < numMarkets:
        marketInfo = self.getMarketInfo(marketIDs[i], account, outitems=marketInfoLength[i] - 1)
        marketsInfo[index] = marketInfoLength[i]
        j = 0
        while j < marketInfoLength[i] - 1:
            marketsInfo[index + j + 1] = marketInfo[j]
            j += 1
        index += marketInfoLength[i]
        i += 1
    return(marketsInfo: arr)

def setController(newController: address):
    if(msg.sender != self.controller):
        ~invalid()
    self.controller = newController
    return(1)

def suicideFunds(to: address):
    if(msg.sender != self.controller):
        ~invalid()
    suicide(to)