# Copyright (C) 2015 Forecast Foundation OU, full GPL notice in LICENSE

extern controller: [lookup:[int256]:int256, assertIsWhitelisted:[int256]:int256]

MUTEX = self.controller.lookup('mutex')
extern mutex: [acquire:[]:int256, release:[]:int256, setController:[address]:int256, suicideFunds:[address]:_]

extern subcurrency: [allowance:[address,address]:uint256, approve:[address,uint256]:uint256, balanceOf:[address]:uint256, decimals:[]:uint256, name:[]:uint256, symbol:[]:uint256, totalSupply:[]:uint256, transfer:[address,uint256]:uint256, transferFrom:[address,address,uint256]:uint256]

inset('../macros/refund.sem')
inset('../macros/safeMath.sem')

data amountFilled[]

data controller

event Order(tokenX:address:indexed, orderSize, tokenY:address:indexed, fxpPrice, expiration, user:address:indexed, gasPrice)

event Cancel(tokenX:address:indexed, orderSize, tokenY:address:indexed, fxpPrice, expiration, gasPrice, user:address:indexed, v, r, s)

event Trade(maker:address:indexed, taker:address, tokenX:address:indexed, tokenY:address:indexed, amount, fxpPrice, tradeHash, gasPrice)

### Off-chain trading contract:
    # Maker can create an order by hashing the order details then signing it and broadcasting the order and signed order

    # Taker takes a broadcasted order, verifies the signature and that the order info hashes to the order hash and that the seller has approved the contract to be able to withdraw funds for the order amount or whatever is left of it [order size minus getAmountFilled(hash) will give us this info] and that the user has the appropriate amount of funds, then calls trade to pick it up.

    # useful info for manipulating sigs / signing things etc https://ethereum.stackexchange.com/questions/710/how-can-i-verify-a-cryptographic-signature-that-was-produced-by-an-ethereum-addr/718#718

# This is used to take an order off the book, it has the order params + amount of the offer you're taking / picking up
# amounts are in the tokens, fxpPrice is in fixed point out of 10**18
def init():
    self.controller = 0x0

def publicTrade(maker: address, v, r, s, tokenX: address, tokenY: address, orderSize, takerAmount, fxpPrice, expiration, gasPriceLimit):
    refund()
    MUTEX.acquire()
    result = self.internalTrade(maker, v, r, s, tokenX, tokenY, orderSize, takerAmount, fxpPrice, expiration, gasPriceLimit)
    MUTEX.release()
    return(result)

def internalTrade(maker: address, v, r, s, tokenX: address, tokenY: address, orderSize, takerAmount, fxpPrice, expiration, gasPriceLimit):
    self.controller.assertIsWhitelisted(msg.sender)

    orderHash = ripemd160([maker, tokenX, tokenY, orderSize, fxpPrice, expiration, gasPriceLimit], items = 7)
    if(!checkSig(maker, orderHash, v, r, s)):
        return(0)
    if(block.timestamp > expiration):
        return(-1)
    if(!checkHasAbilityToSpend(maker, tokenX, orderSize) or !checkHasAbilityToSpend(msg.sender, tokenY, safeFxpMul(takerAmount, fxpPrice))):
        return(-2)
    if(safeAdd(self.amountFilled[orderHash], takerAmount) > orderSize):
        return(-3)
    if(tx.gasprice > gasPriceLimit):
        return(-4)

    self.amountFilled[orderHash] += takerAmount
    # fxpPrice is in units of y per x
    # amount of x * fxpPrice = amount of y
    # amount of x * y / x = amount of y
    if(!tokenX.transferFrom(maker, msg.sender, takerAmount) or !tokenY.transferFrom(msg.sender, maker, safeFxpMul(takerAmount, fxpPrice))):
        ~invalid()
    log(type = Trade, maker, msg.sender, tokenX, tokenY, amount, fxpPrice, orderHash, gasPriceLimit)
    return(1)

# fxpPrice is tokens of y per token of x
# selling tokenX, getting tokenY [aka buying tokenY in exchange for tokenX]
# so fxpPrice is saying "I think x is worth n of token y per one x"
# with USD as y and ETH as x it could be "I think eth is worth 14 of token y per eth [token x] or I'm selling eth for $14 per"
def onChainOrder(tokenX: address, orderSize, tokenY: address, fxpPrice, expiration, gasPriceLimit):
    refund()
    orderHash = ripemd160([msg.sender, tokenX, tokenY, orderSize, fxpPrice, expiration, gasPriceLimit], items = 7)
    log(type = Order, tokenX, orderSize, tokenY, fxpPrice, expiration, msg.sender, gasPriceLimit)
    return(orderHash)

def publicCancelOrder(tokenX: address, orderSize, tokenY: address, fxpPrice, expiration, gasPriceLimit, v, r, s):
    refund()
    MUTEX.acquire()
    result = self.internalCancelOrder(tokenX, orderSize, tokenY, fxpPrice, expiration, gasPriceLimit, v, r, s)
    MUTEX.release()
    return(result)

def internalCancelOrder(tokenX: address, orderSize, tokenY: address, fxpPrice, expiration, gasPriceLimit, v, r, s):
    self.controller.assertIsWhitelisted(msg.sender)

    orderHash = ripemd160([msg.sender, tokenX, tokenY, orderSize, fxpPrice, expiration, gasPriceLimit], items = 7)
    if(ecrecover(orderHash, v, r, s) != msg.sender):
        ~invalid()
    self.amountFilled[orderHash] = orderSize
    log(type = Cancel, tokenX, orderSize, tokenY, fxpPrice, expiration, gasPriceLimit, msg.sender, v, r, s)

    return(1)

def getAmountFilled(orderHash):
    refund()
    return(self.amountFilled[orderHash])

macro checkSig($signer, $hash, $v, $r, $s):
    ecrecover($hash, $v, $r, $s) == $signer

# maker should call approve first [taker also needs to preapprove fund withdrawals]
macro checkHasAbilityToSpend($owner, $token, $amount):
    token.allowance($owner, $self) >= $amount

def setController(newController: address):
    if(msg.sender != self.controller):
        ~invalid()
    self.controller = newController
    return(1)

def suicideFunds(to: address):
    if(msg.sender != self.controller):
        ~invalid()
    suicide(to)