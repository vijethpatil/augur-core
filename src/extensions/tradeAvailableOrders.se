# Copyright (C) 2015 Forecast Foundation OU, full GPL notice in LICENSE

ORDERS = self.controller.lookup('orders')
extern orders: [addOrder:[int256,int256]:int256, cancelOrderLog:[int256,int256,int256,int256,int256,int256,int256,int256,int256]:int256, checkHash:[int256,int256]:int256, commitOrder:[int256]:int256, completeSetsLog:[int256,int256,int256,int256,int256,int256]:int256, fillOrder:[int256,int256,int256,int256]:int256, getAmount:[int256]:int256, getID:[int256]:int256, getLastOrder:[int256]:int256, getLastOutcomePrice:[int256,int256]:int256, getOrder:[int256]:int256[], getOrderIDs:[int256]:int256[], getOrderOwner:[int256]:int256, getPrevID:[int256,int256]:int256, getPrice:[int256]:int256, getTotalOrders:[int256]:int256, getType:[int256]:int256, getVolume:[int256]:int256, makeOrderHash:[int256,int256,int256]:int256, modifyMarketVolume:[int256,int256]:int256, removeOrder:[int256]:int256, removeOrderFromMarket:[int256,int256]:int256, saveOrder:[int256,int256,int256,int256,int256,int256,int256,int256,int256,int256]:int256, setController:[address]:int256, setPrice:[int256,int256,int256]:int256, suicideFunds:[address]:_, takeAskOrderLog:[address,address,address,int256,uint256,address,uint256,uint256,uint256,uint256,uint256]:int256, takeBidOrderLog:[address,address,address,int256,uint256,address,uint256,uint256,uint256,uint256,uint256,uint256]:int256]

TAKEORDER = self.controller.lookup('takeOrder')
extern takeOrder: [publicTakeOrder:[address,uint256]:uint256, setController:[address]:int256, suicideFunds:[address]:_, takeOrder:[address,address,uint256]:uint256]

extern controller: [lookup:[int256]:int256, assertIsWhitelisted:[int256]:int256]

inset('../macros/refund.sem')

data controller

# Minimum gas needed to execute the trade function.
# TODO update with profiled value from the new trade function
macro MINIMUM_GAS_NEEDED_TO_TRADE: 787421

# tradeAvailableOrders [fills the orderIDs in the orderIDs array with a balance at or above fxpMinimumOrderBalance]
# @param amountTakerWants Number of shares to take (buy or sell).
# @param orderIDs Array of order IDs from which to pick one to fill.
# @param fxpMinimumOrderBalance Fill the first order that has a balance at or above this value.
# @return array [error code] or [response code, unfilled value, unfilled amount]
def init():
    self.controller = 0x0

def tradeAvailableOrders(orderIDs: arr, amountTakerWants: uint256, fxpMinimumOrderBalance: uint256):
    # FIXME problem exists here where amounttakerwants can get too low resulting in a throw
    numOrders = len(orderIDs)
    i = 0
    while(i < numOrders and msg.gas > MINIMUM_GAS_NEEDED_TO_TRADE and amountTakerWants):
        if(ORDERS.getAmount(orderIDs[i]) > fxpMinimumOrderBalance):
            amountTakerWants = TAKEORDER.publicTakeOrder(orderIDs[i], amountTakerWants, call = delegate)
        i += 1
    return(amountTakerWants: uint256)

def setController(newController: address):
    if(msg.sender != self.controller):
        ~invalid()
    self.controller = newController
    return(1)

def suicideFunds(to: address):
    if(msg.sender != self.controller):
        ~invalid()
    suicide(to)