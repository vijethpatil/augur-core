# Copyright (C) 2015 Forecast Foundation OU, full GPL notice in LICENSE

extern controller: [lookup:[int256]:int256, assertIsWhitelisted:[int256]:int256]

MARKETS = self.controller.lookup('markets')
extern markets: [addFees:[int256,int256]:int256, addToMarketsHash:[int256,int256]:int256, getBondsMan:[int256]:int256, getBranch:[int256]:int256, getCumulativeScale:[int256]:int256, getExtraInfo:[int256]:bytes, getExtraInfoLength:[int256]:int256, getFees:[int256]:int256, getGasSubsidy:[int256]:int256, getLastExpDate:[int256]:int256, getMarketEvent:[int256]:int256, getMarketNumOutcomes:[int256]:int256, getMarketResolved:[int256]:int256, getMarketShareContracts:[int256]:int256[], getMarketsHash:[int256]:int256, getOriginalTradingPeriod:[int256]:int256, getOutcomeShareContract:[int256,int256]:int256, getOutcomeShareWallet:[int256,int256]:int256, getParticipantSharesPurchased:[int256,int256,int256]:int256, getPushedForward:[int256]:int256, getSharesPurchased:[int256,int256]:uint256, getSharesValue:[int256]:int256, getTags:[int256]:int256[], getTopic:[int256]:int256, getTotalSharesPurchased:[int256]:int256, getTradingFee:[int256]:int256, getTradingPeriod:[int256]:int256, initializeMarket:[int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,bytes,int256,int256,int256,int256[],int256[]]:int256, modifySharesValue:[int256,int256]:int256, refundClosing:[int256,int256]:int256, setController:[address]:int256, setMarketResolved:[int256]:int256, setPushedForward:[int256,int256,int256]:int256, setTradingFee:[int256,int256]:int256, setTradingPeriod:[int256,int256]:int256, suicideFunds:[address]:_]

BRANCHES = self.controller.lookup('branches')
extern branches: [getForkingEvent:[int256]:int256, setForkingEvent:[int256,int256]:int256]

EVENTS = self.controller.lookup('events')
extern events: [allowance:[int256,int256]:uint256, approve:[int256,int256]:int256, assertEventIsInAutomatedReportDisputePhase:[int256]:int256, assertEventIsInAutomatedReportPhase:[int256]:int256, assertEventIsInCurrentReportingWindow:[int256]:int256, assertEventIsInDisputePhase:[int256]:int256, assertEventIsInReportingPhase:[int256]:int256, assertEventIsNotDoneWithReporters:[int256]:int256, assertEventIsNotFinalized:[int256]:int256, assertReporterHasRegistrationToken:[int256]:int256, automatedReport:[int256,int256]:_, balanceOf:[int256,int256,int256,int256]:uint256, createEvent:[int256,int256,int256,int256]:int256, disputeAllReporters:[int256]:_, disputeAutomatedReport:[int256]:_, disputeLimitedReporters:[int256]:_, finalizeEvent:[int256]:_, getAutomatedReportDisputeDueTimestamp:[int256]:int256, getAutomatedReportDueTimestamp:[int256]:int256, getEventBranch:[int256]:int256, getNumberOfAllReporterEvents:[int256,int256]:int256, getNumberOfLimitedReporterEvents:[int256,int256]:int256, isEventFinalized:[int256]:int256, migrateEventThroughAllForks:[int256]:int256, migrateEventThroughOneFork:[int256]:int256, privateAdjustTentativeOutcome:[int256,int256]:_, privateBuyToken:[int256,int256,int256,int256]:_, privateRedeemCorrectOutcomeTokens:[int256,int256,int256,int256]:int256, privateTransfer:[int256,int256,int256,int256,int256,int256]:int256, privateTryRedeemTokensForNonForkingEventOnForkedBranch:[int256,int256,int256,int256]:int256, privateTryRedeemTokensOnForkingEvent:[int256,int256,int256,int256]:int256, redeemTokens:[int256,int256,int256]:int256, report:[int256,int256,int256]:int256, totalSupply:[int256,int256,int256]:uint256, transfer:[int256,int256,int256,int256,int256]:int256, transferFrom:[int256,int256,int256,int256,int256,int256]:int256, tryFinalizeEvent:[int256]:int256]

REPORTING = self.controller.lookup('reporting')
extern reporting: [assertCanReportOnEvent:[int256,int256]:int256, assertDoneReporting:[int256,int256,int256]:int256, clearUserReports:[int256,int256,int256]:int256, getCurrentReportingWindow:[]:int256, getCurrentReportingWindowEndTimestamp:[]:int256, getCurrentReportingWindowStartTimestamp:[]:int256, getReportingPeriodDurationInSeconds:[]:int256, getReportingWindowForTimestamp:[int256]:int256, getTargetReportsPerReporter:[int256,int256]:int256, getUserSeed:[int256,int256,int256]:int256, isInReportingDisputePhase:[]:int256, isInReportingPhase:[]:int256, noteUserReport:[int256,int256]:int256]

MUTEX = self.controller.lookup('mutex')
extern mutex: [acquire:[]:int256, release:[]:int256, setController:[address]:int256, suicideFunds:[address]:_]

extern subcurrency: [allowance:[address,address]:uint256, approve:[address,uint256]:uint256, balanceOf:[address]:uint256, decimals:[]:uint256, name:[]:uint256, symbol:[]:uint256, totalSupply:[]:uint256, transfer:[address,uint256]:uint256, transferFrom:[address,address,uint256]:uint256]

extern forkResolveContract: [resolveFork:[int256]:int256]

extern shareTokens: [allowance:[address,address]:int256, approve:[address,uint256]:int256, balanceOf:[address]:int256, createShares:[address,uint256]:int256, destroyShares:[address,uint256]:int256, getDecimals:[]:int256, getName:[]:int256, getSymbol:[]:int256, setController:[address]:int256, suicideFunds:[address]:_, totalSupply:[]:int256, transfer:[address,uint256]:int256, transferFrom:[address,address,uint256]:int256]

extern wallet: [initialize:[int256]:int256, setController:[address]:int256, suicideFunds:[address]:_, transfer:[address,uint256]:int256]

inset('../macros/refund.sem')
inset('../macros/safeMath.sem')
inset('../macros/unitConversions.sem')

data controller

event marketCreated(sender: indexed, marketID: indexed, topic: indexed, branch, fxpMarketCreationFee, timestamp)

macro POINT_ZERO_THREE: 553402322211286528
macro COST_PER_REPORTER: 3500000
macro COST_FOR_EVENT_REPORT_CALCULATION: 500000
macro THREE_DAYS: 259200
macro FIRST_RESOLVE_BOND: 11 * WEI_TO_ETH
macro SECONDS_PER_YEAR: 31557600
macro TEN_PERCENT_RATE: 100000000000000000
# may want to reconfirm this again
macro COST_FOR_MARKET_RESOLUTION: 1000000

def init():
    self.controller = 0x0

def publicCreateMarket(branch, fxpTradingFee, event, tag1, tag2, tag3, extraInfo: str, currency):
    MUTEX.acquire()
    market = self.createMarket(msg.sender, branch, fxpTradingFee, event, tag1, tag2, tag3, extraInfo, currency, value=msg.value)
    MUTEX.release()
    return(market)

# Create a market. Markets are the basic _tradable_ units / questions that are traded on in Augur
# @param branch is the branch of the market
# @param fxpTradingFee is percent in fixedPoint
# @param event is the event to create the market around
# @params tag1, tag2, and tag3 are the tags describing a market
# @param fxpMakerFees are the percent of the trading fee a maker pays [0-50% in fixed point]
# @param extraInfo is a string of any extra info associated with a market
# @return market if success or 1 if on an oracle only branch creation we have success
# error messages otherwise
    # -1: bad input or event doesn't exist
    # -2: event already expired
    # -4: market already exists
    # -5: currency isn't an approved branch currency
    # -6: didn't pay enough for market resolution gas cost
    # ~invalid()s if not enough money to create the market and place event in the appropriate reporting period
# .05 eth to create
# need at least 1.2M gas @ gas price to cover resolution & 500k per event to calc. num reports for it - this is passed as value to this function
# need to check that it's an actual subcurrency upon market creation
def createMarket(sender: address, branch, fxpTradingFee, event, tag1, tag2, tag3, extraInfo: str, currency):
    self.controller.assertIsWhitelisted(msg.sender)

    periodLength = BRANCHES.getPeriodLength(branch)
    baseReporters = BRANCHES.getBaseReporters(branch)
    creationFee = safeFxpMul(safeFxpDiv(POINT_ZERO_THREE * baseReporters, fxpTradingFee), BRANCHES.getCurrencyRate(branch, currency))
    # gives ether/cash amount in fixed point
    minFee = safeFxpMul(safeMul(safeMul(COST_PER_REPORTER, baseReporters), tx.gasprice), BRANCHES.getCurrencyRate(branch, currency))
    creationFee = max(minFee, creationFee)
    if(!creationFee):
        ~invalid()
    period = block.timestamp / TWENTY_FOUR_HR
    numOutcomes = EVENTS.getNumOutcomes(event)
    cumulativeScale = 0
    # market's trading period is the same as the last expiring event in the market
    expirationDate = EVENTS.getExpiration(event)
    futurePeriod = expirationDate / periodLength
    self.checkMarketCreationPreconditions(branch, periodLength, fxpTradingFee, event, expirationDate, currency, value = msg.value)

    # scalars
    fxpMaxValue = EVENTS.getMaxValue(event)
    fxpMinValue = EVENTS.getMinValue(event)
    scalar = (fxpMaxValue != TWO or fxpMinValue != WEI_TO_ETH) and numOutcomes == 2
    if(scalar):
        # cumulativeScale is the range of a scalar
        cumulativeScale += fxpMaxValue - fxpMinValue
    if(!cumulativeScale):
        cumulativeScale = WEI_TO_ETH

    # formation of market (hash)
    descriptionLength = INFO.getDescriptionLength(event)
    description = INFO.getDescription(event, outchars = descriptionLength)
    marketinfo = string(4*32 + descriptionLength)
    marketinfo[0] = futurePeriod
    marketinfo[1] = fxpTradingFee
    marketinfo[2] = expirationDate
    marketinfo[3] = descriptionLength
    mcopy(marketinfo + 4*32, description, chars = descriptionLength)
    market = ripemd160(marketinfo, chars = len(marketinfo))

    # if it's already been created, throw
    if(INFO.getCreator(market)):
        ~invalid()

    wallet = create('wallet.se')
    wallet.initialize(currency)

    shareContracts = array(numOutcomes)
    shareWallets = array(numOutcomes)
    i = 0
    while i < numOutcomes:
        shareContracts[i] = create('shareTokens.se')
        shareWallets[i] = create('wallet.se')
        shareWallets[i].initialize(shareContracts[i])
        i += 1

    self.makeMarket(sender, branch, fxpCreationFee, market, currency, wallet, event, futurePeriod, fxpTradingFee, tag1, tag2, tag3, cumulativeScale, numOutcomes, extraInfo, expirationDate, shareContracts, shareWallets, value = msg.value)

    log(type = marketCreated, sender, market, tag1, branch, fxpCreationFee, block.timestamp)
    return(market)

def checkMarketCreationPreconditions(branch, periodLength, fxpTradingFee, event, expirationDate, currency):
    # will need to get equivalent value in usd or eth or w/e via etherex exchange for subcurrency markets
    if(msg.sender != self):
        ~invalid()
    if(!periodLength):
        ~invalid()
    if(fxpTradingFee < BRANCHES.getMinTradingFee(branch)):
        ~invalid()
    if(EVENTS.getEventBranch(event) != branch):
        ~invalid()
    if(!INFO.getCreator(event)):
        ~invalid()
    if(expirationDate < block.timestamp):
        ~invalid()
    if(!BRANCHES.getCurrencyActive(branch, currency)):
        ~invalid()
    if(msg.value < safeMul(COST_FOR_MARKET_RESOLUTION, tx.gasprice)):
        ~invalid()
    return(1)

# initialize market and send money to pay for resolution
def makeMarket(sender: address, branch, fxpCreationFee, market, currency, wallet, event, futurePeriod, fxpTradingFee, tag1, tag2, tag3, cumulativeScale, numOutcomes, extraInfo: str, expirationDate, shareContracts: arr, shareWallets: arr):
    if(msg.sender != self):
        ~invalid()
    if(!currency.transferFrom(sender, INFO.getWallet(branch), fxpCreationFee)):
        ~invalid()
    if(!INFO.setInfo(market, text(""), sender, fxpCreationFee, currency, wallet)):
        ~invalid()
    if(!MARKETS.initializeMarket(market, event, futurePeriod, fxpTradingFee, branch, tag1, tag2, tag3, cumulativeScale, numOutcomes, extraInfo, msg.value, fxpCreationFee, expirationDate, shareContracts, shareWallets, value = msg.value)):
        ~invalid()
    if(!BRANCHES.addMarketToBranch(branch, market)):
        ~invalid()
    if(!EVENTS.addMarket(event, market)):
        ~invalid()
    # event creation bond pay w/ markets
        # A = P*e^rt
        # so A - P gives us amount to return to person
    eventCurrency = INFO.getCurrency(event)
    bondPrincipal = EVENTS.getBond(event)
    time = (expirationDate - block.timestamp) * WEI_TO_ETH / SECONDS_PER_YEAR
    amountToPay = safeFxpMul(bondPrincipal, FXP.fxExp(safeFxpMul(time, TEN_PERCENT_RATE))) - bondPrincipal
    if(!eventCurrency.transferFrom(sender, INFO.getCreator(event), amountToPay)):
        ~invalid()
    return(1)

def setController(newController: address):
    if(msg.sender != self.controller):
        ~invalid()
    self.controller = newController
    return(1)

def suicideFunds(to: address):
    if(msg.sender != self.controller):
        ~invalid()
    suicide(to)