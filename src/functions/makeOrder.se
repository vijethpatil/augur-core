# Copyright (C) 2015 Forecast Foundation OU, full GPL notice in LICENSE

extern controller: [lookup:[int256]:int256, assertIsWhitelisted:[int256]:int256]

EVENTS = self.controller.lookup('events')
extern events: [allowance:[int256,int256]:uint256, approve:[int256,int256]:int256, assertEventIsInAutomatedReportDisputePhase:[int256]:int256, assertEventIsInAutomatedReportPhase:[int256]:int256, assertEventIsInCurrentReportingWindow:[int256]:int256, assertEventIsInDisputePhase:[int256]:int256, assertEventIsInReportingPhase:[int256]:int256, assertEventIsNotDoneWithReporters:[int256]:int256, assertEventIsNotFinalized:[int256]:int256, assertReporterHasRegistrationToken:[int256]:int256, automatedReport:[int256,int256]:_, balanceOf:[int256,int256,int256,int256]:uint256, createEvent:[int256,int256,int256,int256]:int256, disputeAllReporters:[int256]:_, disputeAutomatedReport:[int256]:_, disputeLimitedReporters:[int256]:_, finalizeEvent:[int256]:_, getAutomatedReportDisputeDueTimestamp:[int256]:int256, getAutomatedReportDueTimestamp:[int256]:int256, getEventBranch:[int256]:int256, getNumberOfAllReporterEvents:[int256,int256]:int256, getNumberOfLimitedReporterEvents:[int256,int256]:int256, isEventFinalized:[int256]:int256, migrateEventThroughAllForks:[int256]:int256, migrateEventThroughOneFork:[int256]:int256, privateAdjustTentativeOutcome:[int256,int256]:_, privateBuyToken:[int256,int256,int256,int256]:_, privateRedeemCorrectOutcomeTokens:[int256,int256,int256,int256]:int256, privateTransfer:[int256,int256,int256,int256,int256,int256]:int256, privateTryRedeemTokensForNonForkingEventOnForkedBranch:[int256,int256,int256,int256]:int256, privateTryRedeemTokensOnForkingEvent:[int256,int256,int256,int256]:int256, redeemTokens:[int256,int256,int256]:int256, report:[int256,int256,int256]:int256, totalSupply:[int256,int256,int256]:uint256, transfer:[int256,int256,int256,int256,int256]:int256, transferFrom:[int256,int256,int256,int256,int256,int256]:int256, tryFinalizeEvent:[int256]:int256]

MARKETS = self.controller.lookup('markets')
extern markets: [addFees:[int256,int256]:int256, addToMarketsHash:[int256,int256]:int256, getBondsMan:[int256]:int256, getBranch:[int256]:int256, getCumulativeScale:[int256]:int256, getExtraInfo:[int256]:bytes, getExtraInfoLength:[int256]:int256, getFees:[int256]:int256, getGasSubsidy:[int256]:int256, getLastExpDate:[int256]:int256, getMarketEvent:[int256]:int256, getMarketNumOutcomes:[int256]:int256, getMarketResolved:[int256]:int256, getMarketShareContracts:[int256]:int256[], getMarketsHash:[int256]:int256, getOriginalTradingPeriod:[int256]:int256, getOutcomeShareContract:[int256,int256]:int256, getOutcomeShareWallet:[int256,int256]:int256, getParticipantSharesPurchased:[int256,int256,int256]:int256, getPushedForward:[int256]:int256, getSharesPurchased:[int256,int256]:uint256, getSharesValue:[int256]:int256, getTags:[int256]:int256[], getTopic:[int256]:int256, getTotalSharesPurchased:[int256]:int256, getTradingFee:[int256]:int256, getTradingPeriod:[int256]:int256, initializeMarket:[int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,bytes,int256,int256,int256,int256[],int256[]]:int256, modifySharesValue:[int256,int256]:int256, refundClosing:[int256,int256]:int256, setController:[address]:int256, setMarketResolved:[int256]:int256, setPushedForward:[int256,int256,int256]:int256, setTradingFee:[int256,int256]:int256, setTradingPeriod:[int256,int256]:int256, suicideFunds:[address]:_]

ORDERS = self.controller.lookup('orders')
extern orders: [addOrder:[int256,int256]:int256, cancelOrderLog:[int256,int256,int256,int256,int256,int256,int256,int256,int256]:int256, checkHash:[int256,int256]:int256, commitOrder:[int256]:int256, completeSetsLog:[int256,int256,int256,int256,int256,int256]:int256, fillOrder:[int256,int256,int256,int256]:int256, getAmount:[int256]:int256, getID:[int256]:int256, getLastOrder:[int256]:int256, getLastOutcomePrice:[int256,int256]:int256, getOrder:[int256]:int256[], getOrderIDs:[int256]:int256[], getOrderOwner:[int256]:int256, getPrevID:[int256,int256]:int256, getPrice:[int256]:int256, getTotalOrders:[int256]:int256, getType:[int256]:int256, getVolume:[int256]:int256, makeOrderHash:[int256,int256,int256]:int256, modifyMarketVolume:[int256,int256]:int256, removeOrder:[int256]:int256, removeOrderFromMarket:[int256,int256]:int256, saveOrder:[int256,int256,int256,int256,int256,int256,int256,int256,int256,int256]:int256, setController:[address]:int256, setPrice:[int256,int256,int256]:int256, suicideFunds:[address]:_, takeAskOrderLog:[address,address,address,int256,uint256,address,uint256,uint256,uint256,uint256,uint256]:int256, takeBidOrderLog:[address,address,address,int256,uint256,address,uint256,uint256,uint256,uint256,uint256,uint256]:int256]

MUTEX = self.controller.lookup('mutex')
extern mutex: [acquire:[]:int256, release:[]:int256, setController:[address]:int256, suicideFunds:[address]:_]

### This allows you to place orders on the book

extern shareTokens: [allowance:[address,address]:int256, approve:[address,uint256]:int256, balanceOf:[address]:int256, createShares:[address,uint256]:int256, destroyShares:[address,uint256]:int256, getDecimals:[]:int256, getName:[]:int256, getSymbol:[]:int256, setController:[address]:int256, suicideFunds:[address]:_, totalSupply:[]:int256, transfer:[address,uint256]:int256, transferFrom:[address,address,uint256]:int256]

# Warning: subcurrencies/tokens are untrusted contracts
extern subcurrency: [allowance:[address,address]:uint256, approve:[address,uint256]:uint256, balanceOf:[address]:uint256, decimals:[]:uint256, name:[]:uint256, symbol:[]:uint256, totalSupply:[]:uint256, transfer:[address,uint256]:uint256, transferFrom:[address,address,uint256]:uint256]

inset('../macros/refund.sem')
inset('../macros/safeMath.sem')
inset('../macros/unitConversions.sem')

data controller

# Order types
macro BID: 1
macro ASK: 2

macro MIN_ORDER_VALUE: 10**14
macro MAX_INT256_VALUE: 2**255 - 1

# Bid / Ask actions: puts orders on the book
# price is always in 10**18 fxp, so a price of 1 is 1 WEI.
# amount is the amount of shares to buy, also in base units. For a currency with 18 decimals [like ether] if you buy 10**18 at a price of 10**18 then that's going to buy you ONE share [10**18 units] at a cost of ONE ETH [10**18 wei]. For a currency with say 9 decimals, if you buy 10**9 at a price of 10**18 that'll also buy you ONE full unit of that currency worth of shares. If you buy 10**9 at a price of 10**17 that'll buy you POINT_ONE full units of that currency worth of shares [so it'll cost you 10**8]. If you buy 10**8 amount at a price of 10**18 you're also effectively paying POINT_ONE units of currency, this time it's just to get you 10x less shares [in other words you're paying 10x more per share].
# price is the exact price you want to buy/sell at [which may not be the cost, for example to short a binary market it'll cost 1-price, to go long it'll cost price]
# smallest order value is 10**14 WEI
def init():
    self.controller = 0x0

def publicMakeOrder(type: uint256, fxpAmount: uint256, fxpPrice, market: address, outcome: uint256, tradeGroupID):
    refund()
    MUTEX.acquire()
    orderID = self.makeOrder(msg.sender, type, fxpAmount, fxpPrice, market, outcome, tradeGroupID)
    MUTEX.release()
    return(orderID)

def makeOrder(sender: address, type: uint256, fxpAmount: uint256, fxpPrice, market: address, outcome: uint256, tradeGroupID):
    refund()
    self.controller.assertIsWhitelisted(msg.sender)

    if(!EVENTS.getExpiration(MARKETS.getMarketEvent(market))):
        ~invalid()

    if(type == ASK):
        escrow = self.placeAsk(sender, fxpAmount, fxpPrice, market, outcome, outitems = 2)
    elif(type == BID):
        escrow = self.placeBid(sender, fxpAmount, fxpPrice, market, outcome, outitems = 2)
    else:
        ~invalid()

    fxpMoneyEscrowed = escrow[0]
    fxpSharesEscrowed = escrow[1]

    order = [type, market, fxpAmount, fxpPrice, sender, block.number, outcome, fxpMoneyEscrowed, fxpSharesEscrowed]
    orderID = ripemd160(order, items = 9)
    if(ORDERS.getID(orderID)):
        ~invalid()
    ORDERS.saveOrder(orderID, type, market, fxpAmount, fxpPrice, sender, outcome, fxpMoneyEscrowed, fxpSharesEscrowed, tradeGroupID)

    # Update market
    ORDERS.addOrder(market, orderID)

    return(orderID)

def placeAsk(sender: address, fxpAmount: uint256, fxpPrice, market: address, outcome: uint256):
    refund()
    if(msg.sender != self):
        ~invalid()

    fxpMoneyEscrowed = 0
    fxpSharesEscrowed = 0
    event = MARKETS.getMarketEvent(market)
    fxpCumulativeScale = MARKETS.getCumulativeScale(market)

    # Take shares in escrow if user has shares
    fxpSharesHeld = MARKETS.getParticipantSharesPurchased(market, sender, outcome)
    if(fxpSharesHeld > 0):
        fxpCostPerShare = fxpPrice - EVENTS.getMinValue(event)
        fxpCost = safeFxpMul(fxpAmount, fxpCostPerShare)
        if(fxpCostPerShare > fxpCumulativeScale):
            ~invalid()
        if(fxpCost < MIN_ORDER_VALUE):
            ~invalid()
        fxpFill = min(fxpSharesHeld, fxpAmount)
        fxpAmount -= fxpFill
        fxpSharesEscrowed += fxpFill
        MARKETS.getOutcomeShareContract(market, outcome).transferFrom(sender, MARKETS.getOutcomeShareWallet(market, outcome), fxpFill)

    # Take max minus price they want to sell at for the remainder of the amount
    # that wasn't able to be used up above
    if(fxpAmount > 0):
        if(EVENTS.getEventType(event) == "scalar"):
            fxpMaxValue = EVENTS.getMaxValue(event)
        else:
            fxpMaxValue = TWO
        fxpCostPerShareShorting = fxpMaxValue - fxpPrice
        fxpOrderCost = safeFxpMul(fxpAmount, fxpCostPerShareShorting)
        if(fxpCostPerShareShorting > fxpCumulativeScale):
            ~invalid()
        if(fxpOrderCost < MIN_ORDER_VALUE):
            ~invalid()
        fxpMoneyEscrowed += fxpOrderCost
        if(!INFO.getCurrency(market).transferFrom(sender, INFO.getWallet(market), fxpOrderCost)):
            ~invalid()

    return([fxpMoneyEscrowed, fxpSharesEscrowed]: arr)

def placeBid(sender: address, fxpAmount: uint256, fxpPrice, market: address, outcome: uint256):
    refund()
    if(msg.sender != self):
        ~invalid()

    # If user owns n minus the one outcome we're buying escrow no money but
    # escrow their shares in all the other outcomes.
    fxpSharesHeld = MAX_INT256_VALUE
    i = 1
    while(i <= MARKETS.getMarketNumOutcomes(market)):
        if(i != outcome):
            fxpSharesHeld = min(MARKETS.getParticipantSharesPurchased(market, sender, i), fxpSharesHeld)
        i += 1

    fxpCostPerShare = fxpPrice - EVENTS.getMinValue(MARKETS.getMarketEvent(market))
    fxpCost = safeFxpMul(fxpAmount, fxpCostPerShare)
    if(fxpCostPerShare > MARKETS.getCumulativeScale(market)):
        ~invalid()
    if(fxpCost < MIN_ORDER_VALUE):
        ~invalid()

    fxpMoneyEscrowed = 0
    fxpSharesEscrowed = 0

    if(fxpSharesHeld > 0):
        fxpFill = min(fxpSharesHeld, fxpAmount)
        fxpAmount -= fxpFill
        fxpSharesEscrowed += fxpFill
        i = 1
        while(i <= MARKETS.getMarketNumOutcomes(market)):
            if(i != outcome):
                MARKETS.getOutcomeShareContract(market, i).transferFrom(sender, MARKETS.getOutcomeShareWallet(market, i), fxpFill)
            i += 1

    # Take money in escrow for price - min for the remainder of amount that wasn't
    # able to be used up above. Make sure price - min isn't more than range
    if(fxpAmount > 0):
        fxpMoneyEscrowed += fxpCost
        if(!INFO.getCurrency(market).transferFrom(sender, INFO.getWallet(market), fxpCost)):
            ~invalid()

    return([fxpMoneyEscrowed, fxpSharesEscrowed]: arr)

def setController(newController: address):
    if(msg.sender != self.controller):
        ~invalid()
    self.controller = newController
    return(1)

def suicideFunds(to: address):
    if(msg.sender != self.controller):
        ~invalid()
    suicide(to)