# Copyright (C) 2015 Forecast Foundation OU, full GPL notice in LICENSE

extern controller: [lookup:[int256]:int256, assertIsWhitelisted:[int256]:int256]

BRANCHES = self.controller.lookup('branches')
extern branches: [getForkingEvent:[int256]:int256, setForkingEvent:[int256,int256]:int256]

MARKETS = self.controller.lookup('markets')
extern markets: [addFees:[int256,int256]:int256, addToMarketsHash:[int256,int256]:int256, getBondsMan:[int256]:int256, getBranch:[int256]:int256, getCumulativeScale:[int256]:int256, getExtraInfo:[int256]:bytes, getExtraInfoLength:[int256]:int256, getFees:[int256]:int256, getGasSubsidy:[int256]:int256, getLastExpDate:[int256]:int256, getMarketEvent:[int256]:int256, getMarketNumOutcomes:[int256]:int256, getMarketResolved:[int256]:int256, getMarketShareContracts:[int256]:int256[], getMarketsHash:[int256]:int256, getOriginalTradingPeriod:[int256]:int256, getOutcomeShareContract:[int256,int256]:int256, getOutcomeShareWallet:[int256,int256]:int256, getParticipantSharesPurchased:[int256,int256,int256]:int256, getPushedForward:[int256]:int256, getSharesPurchased:[int256,int256]:uint256, getSharesValue:[int256]:int256, getTags:[int256]:int256[], getTopic:[int256]:int256, getTotalSharesPurchased:[int256]:int256, getTradingFee:[int256]:int256, getTradingPeriod:[int256]:int256, initializeMarket:[int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,bytes,int256,int256,int256,int256[],int256[]]:int256, modifySharesValue:[int256,int256]:int256, refundClosing:[int256,int256]:int256, setController:[address]:int256, setMarketResolved:[int256]:int256, setPushedForward:[int256,int256,int256]:int256, setTradingFee:[int256,int256]:int256, setTradingPeriod:[int256,int256]:int256, suicideFunds:[address]:_]

ORDERS = self.controller.lookup('orders')
extern orders: [addOrder:[int256,int256]:int256, cancelOrderLog:[int256,int256,int256,int256,int256,int256,int256,int256,int256]:int256, checkHash:[int256,int256]:int256, commitOrder:[int256]:int256, completeSetsLog:[int256,int256,int256,int256,int256,int256]:int256, fillOrder:[int256,int256,int256,int256]:int256, getAmount:[int256]:int256, getID:[int256]:int256, getLastOrder:[int256]:int256, getLastOutcomePrice:[int256,int256]:int256, getOrder:[int256]:int256[], getOrderIDs:[int256]:int256[], getOrderOwner:[int256]:int256, getPrevID:[int256,int256]:int256, getPrice:[int256]:int256, getTotalOrders:[int256]:int256, getType:[int256]:int256, getVolume:[int256]:int256, makeOrderHash:[int256,int256,int256]:int256, modifyMarketVolume:[int256,int256]:int256, removeOrder:[int256]:int256, removeOrderFromMarket:[int256,int256]:int256, saveOrder:[int256,int256,int256,int256,int256,int256,int256,int256,int256,int256]:int256, setController:[address]:int256, setPrice:[int256,int256,int256]:int256, suicideFunds:[address]:_, takeAskOrderLog:[address,address,address,int256,uint256,address,uint256,uint256,uint256,uint256,uint256]:int256, takeBidOrderLog:[address,address,address,int256,uint256,address,uint256,uint256,uint256,uint256,uint256,uint256]:int256]

COMPLETESETS = self.controller.lookup('completeSets')
extern completeSets: [buyCompleteSets:[address,address,uint256]:int256, publicBuyCompleteSets:[address,uint256]:int256, publicSellCompleteSets:[address,uint256]:int256, sellCompleteSets:[address,address,uint256]:int256, setController:[address]:int256, suicideFunds:[address]:_]

extern shareTokens: [allowance:[address,address]:int256, approve:[address,uint256]:int256, balanceOf:[address]:int256, createShares:[address,uint256]:int256, destroyShares:[address,uint256]:int256, getDecimals:[]:int256, getName:[]:int256, getSymbol:[]:int256, setController:[address]:int256, suicideFunds:[address]:_, totalSupply:[]:int256, transfer:[address,uint256]:int256, transferFrom:[address,address,uint256]:int256]

extern subcurrency: [allowance:[address,address]:uint256, approve:[address,uint256]:uint256, balanceOf:[address]:uint256, decimals:[]:uint256, name:[]:uint256, symbol:[]:uint256, totalSupply:[]:uint256, transfer:[address,uint256]:uint256, transferFrom:[address,address,uint256]:uint256]

extern wallet: [initialize:[int256]:int256, setController:[address]:int256, suicideFunds:[address]:_, transfer:[address,uint256]:int256]

inset('../macros/refund.sem')
inset('../macros/safeMath.sem')
inset('../macros/unitConversions.sem')

data controller

macro MIN_TRADE_VALUE: 10000000000000000
macro MAX_INT256_VALUE: 2**255 - 1

# Trade types
macro BID: 1
macro ASK: 2

# Field counts
macro ORDER_FIELDS: 10

def init():
    self.controller = 0x0

# Filling a bid [aka selling shares]
# Users need to have approved markets to spend their money, simulate fill client side to check in case an order is invalid due to someone not having approved
# Scenarios:
#  - Asker (taker) has maxValue - price and expects complete set minus the one they're selling
#  - Asker (taker) has shares and expects to be paid price - minValue for them
#  - Bidder (maker) owns all shares except the one they're buying and has escrowed them and wants to pay price - minValue for the share and then sell the complete set for range thus getting maxValue - price at the end
#  - Bidder (maker) has escrowed price - minValue for their shares
# @internal
def takeBidOrder(sender: address, orderID: address, fxpAmountTakerWants: uint256):
    refund()
    self.controller.assertIsWhitelisted(msg.sender)

    # Get order
    order = array(ORDER_FIELDS)
    order = ORDERS.getOrder(orderID, outitems=ORDER_FIELDS)
    type = order[1]
    market = order[2]
    fxpAmount = order[3]
    fxpPrice = order[4]
    maker = order[5]
    outcome = order[7]
    fxpMoneyEscrowed = order[8]
    fxpSharesEscrowed = order[9]

    # Check trade preconditions
    if(!order[0]):
        ~invalid()
    if(maker == sender):
        ~invalid()
    # Make sure the order has been mined, obvious HFT prevention
    if(block.number <= order[6]):
        ~invalid()

    orderInfo = array(4)
    orderInfo[0] = market
    orderInfo[1] = outcome
    orderInfo[2] = type
    orderInfo[3] = sender
    orderHash = ripemd160(orderInfo, items=4)
    ORDERS.checkHash(orderHash, sender)

    fxpCumulativeScale = MARKETS.getCumulativeScale(market)
    event = MARKETS.getMarketEvent(market)

    fxpSumOfFills = 0

    # All in shares including the money filled here
    # [money filled means shares that were filled via exchanging money as opposed to shares already owned by either respective party]
    fxpAskerSharesFilled = 0
    fxpAskerMoneyFilled = 0
    fxpBidderSharesFilled = 0
    fxpBidderMoneyFilled = 0

    # Account for bidder closing short: bidder (maker) has escrowed shares of all outcomes EXCEPT the one bidded on
    if(fxpSharesEscrowed > 0):
        fxpFill = min(fxpSharesEscrowed, fxpAmountTakerWants)
        fxpAmountTakerWants = safeSub(fxpAmountTakerWants, fxpFill)
        fxpSumOfFills = safeAdd(fxpSumOfFills, fxpFill)
        fxpBidderSharesFilled = fxpFill

        # Return fxpFill shares of all other outcomes from market's escrow wallet to maker
        i = 1
        while(i <= MARKETS.getMarketNumOutcomes(market)):
            if(i != outcome):
                MARKETS.getOutcomeShareWallet(market, i).transfer(maker, fxpFill)
            i += 1

        # Update bid order with fill info
        fxpRemainderToFill = fxpFill

        # Transfer money from person who bid to the person here who is selling/asker [when they've escrowed shares, the market also has enough money due to the complete set money being in the market]
        if(!INFO.getWallet(market).transfer(sender, safeFxpMul(safeSub(fxpPrice, fxpMinValue), fxpFill))):
            ~invalid()

        # If taker has shares, transfer shares from taker (sender) to maker
        fxpBalance = MARKETS.getParticipantSharesPurchased(market, sender, outcome)
        if(fxpBalance > 0):
            fxpFill = min(fxpBalance, fxpRemainderToFill)
            MARKETS.getOutcomeShareContract(market, outcome).transferFrom(sender, maker, fxpFill)
            fxpAskerSharesFilled = fxpFill
            fxpRemainderToFill = safeSub(fxpRemainderToFill, fxpFill)

        # If taker does not have shares, taker buys complete sets and transfers shares of outcome to maker
        if(fxpRemainderToFill > 0):
            COMPLETESETS.buyCompleteSets(sender, market, fxpRemainderToFill, call=delegate)
            MARKETS.getOutcomeShareContract(market, outcome).transferFrom(sender, maker, fxpRemainderToFill)
            fxpAskerMoneyFilled = fxpRemainderToFill
            fxpRemainderToFill = 0

    # Account for regular bid with money:
    #  - maker's escrowed money goes to taker (sender)
    #  - taker's shares go to maker (if taker has shares) OR shares created for maker (if short selling)
    if(fxpAmountTakerWants > 0 and fxpMoneyEscrowed > 0):
        fxpFill = min(safeFxpDiv(fxpMoneyEscrowed, fxpPrice), fxpAmountTakerWants)
        fxpAmountTakerWants = safeSub(fxpAmountTakerWants, fxpFill)
        fxpSumOfFills = safeAdd(fxpSumOfFills, fxpFill)
        fxpBidderMoneyFilled = fxpFill

        # Update bid order with fill info
        fxpRemainderToFill = fxpFill

        # Transfer money from person who bid to the person here who is selling/asker [bidder has already sent/escrowed the cash to/with the market when submitting bid with cash so this comes from the market]
        if(!INFO.getWallet(market).transfer(sender, safeFxpMul(safeSub(fxpPrice, fxpMinValue), fxpFill))):
            ~invalid()

        # If taker has shares, transfer shares from taker (sender) to maker
        fxpBalance = MARKETS.getParticipantSharesPurchased(market, sender, outcome)
        if(fxpBalance > 0):
            fxpFill = min(fxpBalance, fxpRemainderToFill)
            MARKETS.getOutcomeShareContract(market, outcome).transferFrom(sender, maker, fxpFill)
            fxpAskerSharesFilled += fxpFill
            fxpRemainderToFill = safeSub(fxpRemainderToFill, fxpFill)

        # If taker does not have shares, taker buys complete sets and transfers shares of outcome to maker
        if(fxpRemainderToFill > 0):
            COMPLETESETS.buyCompleteSets(sender, market, fxpRemainderToFill, call=delegate)
            MARKETS.getOutcomeShareContract(market, outcome).transferFrom(sender, maker, fxpRemainderToFill)
            fxpAskerMoneyFilled += fxpRemainderToFill
            fxpRemainderToFill = 0

    # Calculate value: must fill at least 0.00000001 in value
    if(safeFxpMul(fxpSumOfFills, fxpPrice) < MIN_TRADE_VALUE):
        ~invalid()

    # Update order amount or remove
    if(fxpSumOfFills < fxpAmount):
        ORDERS.fillOrder(orderID, fxpSumOfFills, safeFxpMul(fxpBidderMoneyFilled, fxpPrice), fxpBidderSharesFilled)
    else:
        ORDERS.removeOrder(orderID)
        ORDERS.removeOrderFromMarket(market, orderID)

    # Sell maker's complete sets
    fxpSharesHeld = MAX_INT256_VALUE
    i = 1
    while(i <= MARKETS.getMarketNumOutcomes(market)):
        fxpSharesHeld = min(MARKETS.getParticipantSharesPurchased(market, maker, i), fxpSharesHeld)
        i += 1
    if(fxpSharesHeld > 0):
        i = 1
        while(i <= MARKETS.getMarketNumOutcomes(market)):
            MARKETS.getOutcomeShareContract(market, i).destroyShares(maker, fxpSharesHeld)
            i += 1
        fxpMoneyFromSellCompleteSets = safeFxpMul(fxpSharesHeld, fxpCumulativeScale)

        # Send complete sets funds from the market to the maker's account minus (price - minValue) * fxpBidderSharesFilled since market hasnt been paid yet after complete sets selling.
        fxpFee = safeFxpMul(safeFxpMul(MARKETS.getTradingFee(market), fxpSharesHeld), fxpCumulativeScale)
        if(!INFO.getWallet(market).transfer(maker, safeSub(fxpMoneyFromSellCompleteSets, (fxpFee + safeFxpMul(safeSub(fxpPrice, fxpMinValue), fxpBidderSharesFilled))))):
            ~invalid()

        # Send half of sell-complete-sets fees to the market creator
        if(!INFO.getWallet(market).transfer(INFO.getCreator(market), safeDiv(fxpFee, 2))):
            ~invalid()

    # Sell taker's complete sets (if they have any)
    fxpSharesHeld = MAX_INT256_VALUE
    i = 1
    while(i <= MARKETS.getMarketNumOutcomes(market)):
        fxpSharesHeld = min(MARKETS.getParticipantSharesPurchased(market, sender, i), fxpSharesHeld)
        i += 1
    if(fxpSharesHeld > 0):
        COMPLETESETS.sellCompleteSets(sender, market, fxpSharesHeld, call=delegate)

    ORDERS.takeBidOrderLog(market, sender, maker, fxpPrice, fxpSumOfFills, orderID, outcome, fxpAskerSharesFilled, fxpAskerMoneyFilled, fxpBidderSharesFilled, fxpBidderMoneyFilled)
    ORDERS.setPrice(market, outcome, fxpPrice)
    if((INFO.getCurrency(market).balanceOf(INFO.getWallet(market))) < safeFxpMul(MARKETS.getSharesPurchased(market, outcome), MARKETS.getCumulativeScale(market))):
        ~invalid()
    return(fxpAmountTakerWants: uint256)

def setController(newController: address):
    if(msg.sender != self.controller):
        ~invalid()
    self.controller = newController
    return(1)

def suicideFunds(to: address):
    if(msg.sender != self.controller):
        ~invalid()
    suicide(to)
